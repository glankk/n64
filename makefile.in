prefix                        = @prefix@
exec_prefix                   = @exec_prefix@
bindir                        = @bindir@
srcdir                        = @srcdir@
target                        = mips64-ultra-elf
tooldir                       = $(exec_prefix)/$(target)
sysroot                       = $(tooldir)/n64-sysroot
PROGS                         = ed64rdb gfxdis grc libgru libgs luapatch
ALLPROGS                      = $(PROGS:%=all-%)
INSTALLPROGS                  = $(PROGS:%=install-%)
INSTALLSTRIPPROGS             = $(PROGS:%=install-strip-%)
CLEANPROGS                    = $(PROGS:%=clean-%)
DISTCLEANPROGS                = $(PROGS:%=distclean-%)
BINUTILS_VERSION              = @BINUTILS_VERSION@
GCC_VERSION                   = @GCC_VERSION@
NEWLIB_VERSION                = @NEWLIB_VERSION@
GDB_VERSION                   = @GDB_VERSION@
BINUTILS_URL                  = https://ftp.gnu.org/gnu/binutils/$(BINUTILS_VERSION).tar.xz
GCC_URL                       = https://ftp.gnu.org/gnu/gcc/$(GCC_VERSION)/$(GCC_VERSION).tar.xz
NEWLIB_URL                    = https://sourceware.org/pub/newlib/$(NEWLIB_VERSION).tar.gz
GDB_URL                       = https://ftp.gnu.org/gnu/gdb/$(GDB_VERSION).tar.xz
BINUTILS_SUBDIRS              = bfd binutils cpu gas ld libctf libsframe opcodes
NEWLIB_SUBDIRS                = libgloss newlib
GDB_SUBDIRS                   = gdb gdbsupport gnulib readline sim
BINUTILS_SYMLINKS             = $(BINUTILS_SUBDIRS:%=$(GCC_VERSION)/%)
NEWLIB_SYMLINKS               = $(NEWLIB_SUBDIRS:%=$(GCC_VERSION)/%)
GDB_SYMLINKS                  = $(GDB_SUBDIRS:%=$(GCC_VERSION)/%)
GCC_IN_TREE_DEPS              = @GCC_IN_TREE_DEPS@
CONFIG_TOOLCHAIN              = @CONFIG_TOOLCHAIN@
LDFLAGS                       = @LDFLAGS@
CFLAGS_FOR_TARGET             = @CFLAGS_FOR_TARGET@
CXXFLAGS_FOR_TARGET           = @CXXFLAGS_FOR_TARGET@
INSTALL                       = @INSTALL@
MKDIR_P                       = @MKDIR_P@
WGET                          = @WGET@

all:

.PHONY: all install install-full clean distclean
.PHONY: all-progs $(ALLPROGS) install-progs $(INSTALLPROGS) install-strip-progs $(INSTALLSTRIPPROGS) clean-progs $(CLEANPROGS) distclean-progs $(DISTCLEANPROGS)
.PHONY: src-all clean-src-binutils clean-src-gcc clean-src-newlib clean-src-gdb clean-src-all
.PHONY: symlinks-binutils symlinks-newlib symlinks-gdb symlinks-all clean-symlinks-binutils clean-symlinks-newlib clean-symlinks-gdb clean-symlinks-all
.PHONY: prepare-toolchain configure-toolchain all-toolchain install-toolchain clean-toolchain
.PHONY: install-sys

all: all-progs

install: install-progs

install-strip: install-strip-progs

clean: clean-progs clean-src-all clean-toolchain

distclean: distclean-progs
	rm -f config.log config.status src/config.h makefile

install-full:
	$(MAKE) all-toolchain
	$(MAKE) install-toolchain
	$(MAKE) all-progs
	$(MAKE) install-progs
	$(MAKE) install-sys

all-progs: $(ALLPROGS)

$(ALLPROGS):
	cd src/$(@:all-%=%) && $(MAKE) all

install-progs: $(INSTALLPROGS)

$(INSTALLPROGS):
	cd src/$(@:install-%=%) && $(MAKE) install

install-strip-progs: $(INSTALLSTRIPPROGS)

$(INSTALLSTRIPPROGS):
	cd src/$(@:install-strip-%=%) && $(MAKE) install-strip

clean-progs: $(CLEANPROGS)

$(CLEANPROGS):
	cd src/$(@:clean-%=%) && $(MAKE) clean

distclean-progs: $(DISTCLEANPROGS)

$(DISTCLEANPROGS):
	cd src/$(@:distclean-%=%) && $(MAKE) distclean

%/:
	$(MKDIR_P) $(@)

src-binutils:
	$(WGET) - "$(BINUTILS_URL)" | tar xJ
	patch -d $(BINUTILS_VERSION)/ld -p 1 <"$(srcdir)/config/ld/ld.diff"
	cp "$(srcdir)/config/ld/emulparams/"* $(BINUTILS_VERSION)/ld/emulparams
	cp "$(srcdir)/config/ld/emultempl/"* $(BINUTILS_VERSION)/ld/emultempl
	cat "$(srcdir)/config/ld/configure.tgt.ultra" >>$(BINUTILS_VERSION)/ld/configure.tgt
	cat "$(srcdir)/config/bfd/config.bfd.ultra" >>$(BINUTILS_VERSION)/bfd/config.bfd
	touch $(@)

src-gcc:
	$(WGET) - "$(GCC_URL)" | tar xJ
	if [ x"$(GCC_IN_TREE_DEPS)" = x"yes" ]; then \
		cd $(GCC_VERSION) && ./contrib/download_prerequisites; \
	fi
	cp "$(srcdir)/config/gcc/mips/"* $(GCC_VERSION)/gcc/config/mips
	cat "$(srcdir)/config/gcc/config.gcc.ultra" >>$(GCC_VERSION)/gcc/config.gcc
	touch $(@)

src-newlib:
	$(WGET) - "$(NEWLIB_URL)" | tar xz
	if patch --dry-run -d $(NEWLIB_VERSION) -p 1 <"$(srcdir)/config/newlib/fix-libgloss.diff"; then \
		patch -d $(NEWLIB_VERSION) -p 1 <"$(srcdir)/config/newlib/fix-libgloss.diff"; \
	fi
	touch $(@)

src-gdb:
	$(WGET) - "$(GDB_URL)" | tar xJ
	if patch --dry-run -d $(GDB_VERSION) -p 1 <"$(srcdir)/config/gdb/gdb-11.2-release.diff"; then \
		patch -d $(GDB_VERSION) -p 1 <"$(srcdir)/config/gdb/gdb-11.2-release.diff"; \
	elif patch --dry-run -d $(GDB_VERSION) -p 1 <"$(srcdir)/config/gdb/gdb-12.1-release.diff"; then \
		patch -d $(GDB_VERSION) -p 1 <"$(srcdir)/config/gdb/gdb-12.1-release.diff"; \
	elif patch --dry-run -d $(GDB_VERSION) -p 1 <"$(srcdir)/config/gdb/gdb-14.1-release.diff"; then \
		patch -d $(GDB_VERSION) -p 1 <"$(srcdir)/config/gdb/gdb-14.1-release.diff"; \
	elif patch --dry-run -d $(GDB_VERSION) -p 1 <"$(srcdir)/config/gdb/gdb-16.2-release.diff"; then \
		patch -d $(GDB_VERSION) -p 1 <"$(srcdir)/config/gdb/gdb-16.2-release.diff"; \
	else \
		false; \
	fi
	cat "$(srcdir)/config/bfd/config.bfd.ultra" >>$(GDB_VERSION)/bfd/config.bfd
	touch $(@)

src-all: src-binutils src-gcc src-newlib src-gdb

clean-src-binutils:
	rm -rf $(BINUTILS_VERSION)
	rm -f src-binutils

clean-src-gcc:
	rm -rf $(GCC_VERSION)
	rm -f src-gcc

clean-src-newlib:
	rm -rf $(NEWLIB_VERSION)
	rm -f src-newlib

clean-src-gdb:
	rm -rf $(GDB_VERSION)
	rm -f src-gdb

clean-src-all: clean-src-binutils clean-src-gcc clean-src-newlib clean-src-gdb

$(BINUTILS_SYMLINKS): src-binutils | $(GCC_VERSION)/
	cd $(GCC_VERSION) && ln -sf $(@:$(GCC_VERSION)/%=../$(BINUTILS_VERSION)/%) $(@:$(GCC_VERSION)/%=./%)
	touch $(@)

$(NEWLIB_SYMLINKS): src-newlib | $(GCC_VERSION)/
	cd $(GCC_VERSION) && ln -sf $(@:$(GCC_VERSION)/%=../$(NEWLIB_VERSION)/%) $(@:$(GCC_VERSION)/%=./%)
	touch $(@)

$(GDB_SYMLINKS): src-gdb | $(GCC_VERSION)/
	cd $(GCC_VERSION) && ln -sf $(@:$(GCC_VERSION)/%=../$(GDB_VERSION)/%) $(@:$(GCC_VERSION)/%=./%)
	touch $(@)

symlinks-binutils: | $(BINUTILS_SYMLINKS)

symlinks-newlib: | $(NEWLIB_SYMLINKS)

symlinks-gdb: | $(GDB_SYMLINKS)

symlinks-all: symlinks-binutils symlinks-newlib symlinks-gdb

clean-symlinks-binutils:
	rm -f $(BINUTILS_SYMLINKS)

clean-symlinks-newlib:
	rm -f $(NEWLIB_SYMLINKS)

clean-symlinks-gdb:
	rm -f $(GDB_SYMLINKS)

clean-symlinks-all: clean-symlinks-binutils clean-symlinks-newlib clean-symlinks-gdb

prepare-toolchain: src-all symlinks-all

configure-toolchain: build-toolchain/config.status

build-toolchain/config.status: src-binutils src-gcc src-newlib src-gdb
build-toolchain/config.status: | $(BINUTILS_SYMLINKS) $(NEWLIB_SYMLINKS) $(GDB_SYMLINKS)
build-toolchain/config.status: | build-toolchain/
	cd build-toolchain && ../$(GCC_VERSION)/configure \
		--prefix="$(prefix)" \
		--target=$(target) \
		--with-gnu-as \
		--with-gnu-ld \
		--with-arch=vr4300 \
		--with-abi=32 \
		--with-newlib \
		--enable-newlib-global-atexit \
		--disable-newlib-fvwrite-in-streamio \
		--disable-newlib-wide-orient \
		--disable-newlib-unbuf-stream-opt \
		--disable-newlib-supplied-syscalls \
		--enable-lite-exit \
		--with-sysroot="$(sysroot)" \
		--with-native-system-header-dir="//usr/include" \
		--enable-languages=c,c++,lto \
		--enable-sjlj-exceptions \
		--disable-threads \
		--disable-nls \
		LDFLAGS="$(LDFLAGS)" \
		CFLAGS_FOR_TARGET="$(CFLAGS_FOR_TARGET)" \
		CXXFLAGS_FOR_TARGET="$(CXXFLAGS_FOR_TARGET)" \
		$(CONFIG_TOOLCHAIN)

all-toolchain: build-toolchain/config.status
	cd build-toolchain && $(MAKE) all

install-toolchain: build-toolchain/config.status
	cd build-toolchain && $(MAKE) install

clean-toolchain:
	rm -rf build-toolchain

install-sys:
	$(MKDIR_P) "$(DESTDIR)$(sysroot)/usr"
	cp -R -p "$(srcdir)/include" "$(srcdir)/lib" "$(DESTDIR)$(sysroot)/usr"
